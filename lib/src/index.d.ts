import { IndexedDB } from './browser';
import { validate } from './reg';
import { Ajax } from './request';
declare const _default: {
    version: string;
    transFormat: (str: any, oldChar: any, newChar: any) => any;
    strInversion: (str: any) => any[];
    initialToCapitali: (gname: string) => string;
    repeat: (str: string, n: number) => string;
    trim: (str: string) => string;
    getTextWidth: (text: string, font: any) => number;
    guid: () => string;
    getFileBase64: (file: File, cb: (base64: any) => void) => void;
    isAndroidMobileDevice: () => boolean;
    isAppleMobileDevice: () => boolean;
    throttle: (fn: () => void, delay?: number) => () => void;
    debounce: (fn: () => void, wait: number) => () => void;
    fileDownload: (url: string) => boolean;
    fuzzyQuery: (list: any[], key: string, keyWord: string) => any[];
    getUrlParam: () => any;
    cookie: {
        set: (key: string, value: string, expTime?: number) => void;
        delete: (key: string) => void;
        get: (key: string) => string;
    };
    colorHex: (color: string) => string;
    viewportToPixels: (value: string) => number;
    noRefdelUrlParam: (ref: string) => string;
    getAge: (id: string) => string;
    getSex: (id: string) => "男" | "女";
    digitUppercase: (n: number) => string;
    hexToRgba: (str: string, alpa: number) => string;
    rgbaToHex: (color: any) => string;
    injectScript: (src: string) => void;
    sinogToLetter: (str: string) => string;
    getFitSize: (px: number, draft?: number) => number;
    toFullScreen: () => void;
    exitFullscreen: () => void;
    LocalStorage: {
        get(user: string, name: string): string;
        set(user: string, name: string, value: any): void;
        remove(user: string, name: string): void;
        clear(): void;
    };
    getPosition: (timeout?: number, maximumAge?: number) => Promise<unknown>;
    winCopy: (flag: any) => void;
    print: (printEleId: string, rootEleId: string, style: string) => boolean;
    setVibration: () => void;
    copy: (str: string) => void;
    scrollToTop: () => void;
    userBrowser: () => string;
    IndexedDB: typeof IndexedDB;
    getLocalStorageSize: () => string;
    performanceAnalysis: () => void;
    getPerformanceTiming: () => any;
    getDistance: (startLon: number, startLat: number, endLon: number, endLat: number) => number;
    calcDistance: (lat1: any, lng1: any, lat2: any, lng2: any) => number;
    lonLatToMercator: (lonLat: {
        lon: number;
        lat: number;
    }) => any;
    mercatorToLonlat: (mercator: {
        x: number;
        y: number;
    }) => any;
    validate: typeof validate;
    getOffset: (ele: any) => any;
    shaking: ({ ele, attr, cb, rate, time }: {
        ele: any;
        attr: string;
        cb: () => void;
        time?: number;
        rate?: number;
    }) => void;
    stopPropagation: (e: any) => void;
    hasClass: (ele: HTMLElement, name: string) => RegExpMatchArray;
    addClass: (ele: HTMLElement, name: string) => void;
    removeClass: (ele: HTMLElement, name: string) => void;
    replaceClass: (ele: HTMLElement, newName: string, oldName: string) => void;
    numberRoll: (ele: any, targetNumber: number, duration: number) => void;
    scrollToTheBottom: (ele: HTMLElement, callback: () => void, delay?: number) => void;
    arrayUnique: (arr: any[]) => any[];
    arrayNonRepeatfy: (arr: any[]) => any[];
    aLineUnique: (arr: any[]) => any[];
    bubbleSort: (arr: any) => any;
    cloneDeep: (data: any) => any;
    stringfyQueryString: (obj: Record<string, import("./object").pos>) => string;
    deserialization: (str: string) => {};
    values: (obj: Record<string, unknown>) => unknown[];
    keys: (obj: Record<string, unknown>) => unknown[];
    isBase64: (base64: string) => boolean;
    isArray: (arr: unknown) => boolean;
    isString: (str: unknown) => boolean;
    isFunction: (fn: unknown) => boolean;
    isObject: (obj: unknown) => boolean;
    isNumber: (num: any) => boolean;
    isWeiXin: () => boolean;
    isNull: (o: unknown) => boolean;
    isUndefined: (o: unknown) => boolean;
    isDate: (o: unknown) => boolean;
    isRegExp: (o: unknown) => boolean;
    isError: (o: unknown) => boolean;
    isSymbol: (o: unknown) => boolean;
    isPromise: (o: unknown) => boolean;
    returnType: (o: unknown) => unknown;
    isSupportWebP: () => boolean;
    isMobile: () => boolean;
    downBlob: (data: any, fileName: string) => void;
    vConsole: () => void;
    socket: ({ url }: {
        url: string;
    }) => any;
    Ajax: typeof Ajax;
    orient: () => void;
    dateFormater: (formater: string, time?: number) => string;
    formatPassTime: (startTime: any) => string;
    formatRemainTime: (endTime: any) => string;
    smallRounding: (num: number, place: number) => number;
    shuffle: (arr: any[]) => any[];
    accAdd: (num1: any, num2: number) => number;
    accSub: (num1: number, num2: number) => Number;
    accMul: (num1: number, num2: number) => number;
    accDiv: (num1: Number, num2: Number) => Number;
    formatPrice: (price: any, sign?: string) => string;
    forEach: (data: Record<string, unknown> | unknown[], fn: () => void) => any;
    filter: (data: Object | any[], fn: Function) => any[];
};
export default _default;
