
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.superToolsLib = factory());
}(this, (function () { 'use strict';

  var version = "1.35.0";

  const initialToCapitali = (gname) => {
      const pattern = new RegExp('[A-Za-z]+');
      const str = gname.substr(0, 1);
      if (pattern.test(str)) {
          return `${str.toUpperCase()}${gname.substr(1)}`;
      }
      else {
          const str1 = gname.substr(-1);
          return `${gname.substr(0, gname.length - 1)}${str1.toUpperCase()}`;
      }
  };
  const repeat = (str, n) => {
      let res = '';
      while (n) {
          if (n % 2 === 1)
              res += str;
          if (n > 1)
              str += str;
          n >>= 1;
      }
      return res;
  };
  const trim = (str) => {
      return str.replace(/^\s+(.*?)\s+$/g, '$1');
  };
  const getTextWidth = (text, font) => {
      const canvas = document.createElement('canvas');
      const context = canvas.getContext('2d');
      context.font = font;
      const metrics = context.measureText(text);
      return metrics.width;
  };
  const transFormat = (str, oldChar, newChar) => {
      const reg = new RegExp(oldChar, 'g');
      str = str.replace(reg, newChar);
      return str;
  };
  const strInversion = str => {
      str = str + '';
      let newStr = [];
      newStr = str.split('').reverse().join('');
      return newStr;
  };

  const strChineseFirstPY = '';
  const oMultiDiff = { '19969': 'DZ', '19975': 'WM', '19988': 'QJ', '20048': 'YL', '20056': 'SC', '20060': 'NM', '20094': 'QG', '20127': 'QJ', '20167': 'QC', '20193': 'YG', '20250': 'KH', '20256': 'ZC', '20282': 'SC', '20285': 'QJG', '20291': 'TD', '20314': 'YD', '20340': 'NE', '20375': 'TD', '20389': 'YJ', '20391': 'CZ', '20415': 'PB', '20446': 'YS', '20447': 'SQ', '20504': 'TC', '20608': 'KG', '20854': 'QJ', '20857': 'ZC', '20911': 'PF', '20985': 'AW', '21032': 'PB', '21048': 'XQ', '21049': 'SC', '21089': 'YS', '21119': 'JC', '21242': 'SB', '21273': 'SC', '21305': 'YP', '21306': 'QO', '21330': 'ZC', '21333': 'SDC', '21345': 'QK', '21378': 'CA', '21397': 'SC', '21414': 'XS', '21442': 'SC', '21477': 'JG', '21480': 'TD', '21484': 'ZS', '21494': 'YX', '21505': 'YX', '21512': 'HG', '21523': 'XH', '21537': 'PB', '21542': 'PF', '21549': 'KH', '21571': 'E', '21574': 'DA', '21588': 'TD', '21589': 'O', '21618': 'ZC', '21621': 'KHA', '21632': 'ZJ', '21654': 'KG', '21679': 'LKG', '21683': 'KH', '21710': 'A', '21719': 'YH', '21734': 'WOE', '21769': 'A', '21780': 'WN', '21804': 'XH', '21834': 'A', '21899': 'ZD', '21903': 'RN', '21908': 'WO', '21939': 'ZC', '21956': 'SA', '21964': 'YA', '21970': 'TD', '22003': 'A', '22031': 'JG', '22040': 'XS', '22060': 'ZC', '22066': 'ZC', '22079': 'MH', '22129': 'XJ', '22179': 'XA', '22237': 'NJ', '22244': 'TD', '22280': 'JQ', '22300': 'YH', '22313': 'XW', '22331': 'YQ', '22343': 'YJ', '22351': 'PH', '22395': 'DC', '22412': 'TD', '22484': 'PB', '22500': 'PB', '22534': 'ZD', '22549': 'DH', '22561': 'PB', '22612': 'TD', '22771': 'KQ', '22831': 'HB', '22841': 'JG', '22855': 'QJ', '22865': 'XQ', '23013': 'ML', '23081': 'WM', '23487': 'SX', '23558': 'QJ', '23561': 'YW', '23586': 'YW', '23614': 'YW', '23615': 'SN', '23631': 'PB', '23646': 'ZS', '23663': 'ZT', '23673': 'YG', '23762': 'TD', '23769': 'ZS', '23780': 'QJ', '23884': 'QK', '24055': 'XH', '24113': 'DC', '24162': 'ZC', '24191': 'GA', '24273': 'QJ', '24324': 'NL', '24377': 'TD', '24378': 'QJ', '24439': 'PF', '24554': 'ZS', '24683': 'TD', '24694': 'WE', '24733': 'LK', '24925': 'TN', '25094': 'ZG', '25100': 'XQ', '25103': 'XH', '25153': 'PB', '25170': 'PB', '25179': 'KG', '25203': 'PB', '25240': 'ZS', '25282': 'FB', '25303': 'NA', '25324': 'KG', '25341': 'ZY', '25373': 'WZ', '25375': 'XJ', '25384': 'A', '25457': 'A', '25528': 'SD', '25530': 'SC', '25552': 'TD', '25774': 'ZC', '25874': 'ZC', '26044': 'YW', '26080': 'WM', '26292': 'PB', '26333': 'PB', '26355': 'ZY', '26366': 'CZ', '26397': 'ZC', '26399': 'QJ', '26415': 'ZS', '26451': 'SB', '26526': 'ZC', '26552': 'JG', '26561': 'TD', '26588': 'JG', '26597': 'CZ', '26629': 'ZS', '26638': 'YL', '26646': 'XQ', '26653': 'KG', '26657': 'XJ', '26727': 'HG', '26894': 'ZC', '26937': 'ZS', '26946': 'ZC', '26999': 'KJ', '27099': 'KJ', '27449': 'YQ', '27481': 'XS', '27542': 'ZS', '27663': 'ZS', '27748': 'TS', '27784': 'SC', '27788': 'ZD', '27795': 'TD', '27812': 'O', '27850': 'PB', '27852': 'MB', '27895': 'SL', '27898': 'PL', '27973': 'QJ', '27981': 'KH', '27986': 'HX', '27994': 'XJ', '28044': 'YC', '28065': 'WG', '28177': 'SM', '28267': 'QJ', '28291': 'KH', '28337': 'ZQ', '28463': 'TL', '28548': 'DC', '28601': 'TD', '28689': 'PB', '28805': 'JG', '28820': 'QG', '28846': 'PB', '28952': 'TD', '28975': 'ZC', '29100': 'A', '29325': 'QJ', '29575': 'SL', '29602': 'FB', '30010': 'TD', '30044': 'CX', '30058': 'PF', '30091': 'YSP', '30111': 'YN', '30229': 'XJ', '30427': 'SC', '30465': 'SX', '30631': 'YQ', '30655': 'QJ', '30684': 'QJG', '30707': 'SD', '30729': 'XH', '30796': 'LG', '30917': 'PB', '31074': 'NM', '31085': 'JZ', '31109': 'SC', '31181': 'ZC', '31192': 'MLB', '31293': 'JQ', '31400': 'YX', '31584': 'YJ', '31896': 'ZN', '31909': 'ZY', '31995': 'XJ', '32321': 'PF', '32327': 'ZY', '32418': 'HG', '32420': 'XQ', '32421': 'HG', '32438': 'LG', '32473': 'GJ', '32488': 'TD', '32521': 'QJ', '32527': 'PB', '32562': 'ZSQ', '32564': 'JZ', '32735': 'ZD', '32793': 'PB', '33071': 'PF', '33098': 'XL', '33100': 'YA', '33152': 'PB', '33261': 'CX', '33324': 'BP', '33333': 'TD', '33406': 'YA', '33426': 'WM', '33432': 'PB', '33445': 'JG', '33486': 'ZN', '33493': 'TS', '33507': 'QJ', '33540': 'QJ', '33544': 'ZC', '33564': 'XQ', '33617': 'YT', '33632': 'QJ', '33636': 'XH', '33637': 'YX', '33694': 'WG', '33705': 'PF', '33728': 'YW', '33882': 'SR', '34067': 'WM', '34074': 'YW', '34121': 'QJ', '34255': 'ZC', '34259': 'XL', '34425': 'JH', '34430': 'XH', '34485': 'KH', '34503': 'YS', '34532': 'HG', '34552': 'XS', '34558': 'YE', '34593': 'ZL', '34660': 'YQ', '34892': 'XH', '34928': 'SC', '34999': 'QJ', '35048': 'PB', '35059': 'SC', '35098': 'ZC', '35203': 'TQ', '35265': 'JX', '35299': 'JX', '35782': 'SZ', '35828': 'YS', '35830': 'E', '35843': 'TD', '35895': 'YG', '35977': 'MH', '36158': 'JG', '36228': 'QJ', '36426': 'XQ', '36466': 'DC', '36710': 'JC', '36711': 'ZYG', '36767': 'PB', '36866': 'SK', '36951': 'YW', '37034': 'YX', '37063': 'XH', '37218': 'ZC', '37325': 'ZC', '38063': 'PB', '38079': 'TD', '38085': 'QY', '38107': 'DC', '38116': 'TD', '38123': 'YD', '38224': 'HG', '38241': 'XTC', '38271': 'ZC', '38415': 'YE', '38426': 'KH', '38461': 'YD', '38463': 'AE', '38466': 'PB', '38477': 'XJ', '38518': 'YT', '38551': 'WK', '38585': 'ZC', '38704': 'XS', '38739': 'LJ', '38761': 'GJ', '38808': 'SQ', '39048': 'JG', '39049': 'XJ', '39052': 'HG', '39076': 'CZ', '39271': 'XT', '39534': 'TD', '39552': 'TD', '39584': 'PB', '39647': 'SB', '39730': 'LG', '39748': 'TPB', '40109': 'ZQ', '40479': 'ND', '40516': 'HG', '40536': 'HG', '40583': 'QJ', '40765': 'YQ', '40784': 'QJ', '40840': 'YK', '40863': 'QJG' };

  const guid = () => {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
          const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
          return v.toString(16);
      });
  };
  const getFileBase64 = (file, cb) => {
      if (!file)
          throw new Error('Error! no param "file"(getFileBase64()).');
      const reader = new FileReader();
      reader.onload = function (e) {
          const base64 = e.target.result;
          if (cb)
              cb(base64);
      };
      reader.onerror = function () {
          alert('Read file fail.');
      };
      reader.readAsDataURL(file);
  };
  const throttle = function (fn, delay = 200) {
      let timer = null;
      return function (...rest) {
          if (!timer) {
              timer = setTimeout(() => {
                  fn(...rest);
                  timer = null;
              }, delay);
          }
      };
  };
  const debounce = function (fn, wait) {
      let timeout = null;
      return function (...rest) {
          if (timeout !== null)
              clearTimeout(timeout);
          timeout = setTimeout(() => {
              fn(...rest);
              timeout = null;
          }, wait);
      };
  };
  const fileDownload = function (url) {
      const isChrome = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;
      const isSafari = navigator.userAgent.toLowerCase().indexOf('safari') > -1;
      if (isChrome || isSafari) {
          const link = document.createElement('a');
          link.href = url;
          if (link.download !== undefined) {
              const fileName = url.substring(url.lastIndexOf('/') + 1, url.length);
              link.download = fileName;
          }
          if (document.createEvent) {
              const e = document.createEvent('MouseEvents');
              e.initEvent('click', true, true);
              link.dispatchEvent(e);
              return true;
          }
      }
      if (url.indexOf('?') === -1) {
          url += '?download';
      }
      window.open(url, '_self');
      return true;
  };
  const fuzzyQuery = function (list, key, keyWord) {
      const arr = [];
      for (let i = 0; i < list.length; i++) {
          if (list[i][key].match(keyWord) !== null) {
              arr.push(list[i]);
          }
      }
      return arr;
  };
  const getUrlParam = function () {
      const url = document.location.toString();
      let arrObj = url.split('?');
      const params = Object.create(null);
      if (arrObj.length > 1) {
          arrObj = arrObj[1].split('&');
          arrObj.forEach((item) => {
              item = item.split('=');
              params[item[0]] = item[1];
          });
      }
      return params;
  };
  const cookie = {
      set: (key, value, expTime) => {
          document.cookie = key + '=' + value + ';max-age=' + expTime;
      },
      delete: (key) => {
          document.cookie = key + '=' + '' + ';max-age=' + -1;
      },
      get: (key) => {
          const CookiesArray = document.cookie.split('; ');
          let value = undefined;
          for (let i = 0; i < CookiesArray.length; i++) {
              const CookieItem = CookiesArray[i];
              const CookieItemArray = CookieItem.split('=');
              if (CookieItemArray[0] == key) {
                  value = CookieItemArray[1];
              }
          }
          return value;
      }
  };
  const colorHex = (color) => {
      const that = color;
      const aColor = color
          .replace(/rgb?\(/, '')
          .replace(/\)/, '')
          .replace(/[\s+]/g, '')
          .split(',');
      let strHex = '#';
      for (let i = 0; i < aColor.length; i++) {
          let hex = Number(aColor[i]).toString(16);
          if (hex.length < 2) {
              hex = '0' + hex;
          }
          strHex += hex;
      }
      if (strHex.length !== 7) {
          strHex = that;
      }
      return strHex;
  };
  const hexToRgba = (str, alpa) => {
      alpa = alpa === undefined ? 1 : alpa;
      if (!str)
          return;
      let color = str.toLowerCase();
      const pattern = /^#([0-9|a-f]{3}|[0-9|a-f]{6})$/;
      if (color && pattern.test(color)) {
          if (color.length === 4) {
              color = '#' + color[1] + color[1] + color[2] + color[2] + color[3] + color[3];
          }
          const colorNew = [];
          for (let i = 1; i < 7; i += 2) {
              colorNew.push(parseInt('0x' + color.slice(i, i + 2)));
          }
          colorNew.push(alpa);
          return 'rgba(' + colorNew.join(',') + ')';
      }
      return color;
  };
  const rgbaToHex = (color) => {
      const values = color
          .replace(/rgba?\(/, '')
          .replace(/\)/, '')
          .replace(/[\s+]/g, '')
          .split(',');
      const a = parseFloat(values[3] || 1), r = Math.floor(a * parseInt(values[0]) + (1 - a) * 255), g = Math.floor(a * parseInt(values[1]) + (1 - a) * 255), b = Math.floor(a * parseInt(values[2]) + (1 - a) * 255);
      return '#' +
          ('0' + r.toString(16)).slice(-2) +
          ('0' + g.toString(16)).slice(-2) +
          ('0' + b.toString(16)).slice(-2);
  };
  const viewportToPixels = (value) => {
      const parts = value.match(/([0-9\.]+)(vh|vw)/);
      const q = Number(parts[1]);
      let side = 0;
      if (parts[2] === 'vw') {
          side = window.innerWidth;
      }
      else {
          side = window.innerHeight;
      }
      return side * (q / 100);
  };
  const noRefdelUrlParam = (ref) => {
      const url = window.location.href;
      if (url.indexOf(ref) == -1) {
          return url;
      }
      const arr_url = url.split('?');
      const base = arr_url[0];
      const arr_param = arr_url[1].split('&');
      let index = -1;
      for (let i = 0; i < arr_param.length; i++) {
          const paired = arr_param[i].split('=');
          if (paired[0] == ref) {
              index = i;
              break;
          }
      }
      if (index == -1) {
          return url;
      }
      else {
          arr_param.splice(index, 1);
          window.history.pushState({}, '0', base + '?' + arr_param.join('&'));
          return base + '?' + arr_param.join('&');
      }
  };
  const getAge = (id) => {
      const year = id.substr(6, 4);
      const month = id.substr(10, 2);
      const day = id.substr(12, 2);
      const timeBrth = new Date(`${year}/${month}/${day}`).getTime();
      const timeNow = new Date().getTime();
      const longTime = timeNow - timeBrth;
      const days = longTime / (1 * 24 * 60 * 60 * 1000);
      let result = '';
      if (days < 31) {
          result = parseInt(`${days}`) + '天';
      }
      else if (days < 365) {
          result = `${parseInt(`${days / 30}`)}月${parseInt(`${days % 30}`)}天`;
      }
      else {
          result = `${parseInt(`${days / 365}`)}岁${parseInt(`${days % 365 / 30}`)}月${parseInt(`${days % 365 % 30}`)}天`;
      }
      return result;
  };
  const getSex = (id) => {
      const sex = Number(id.substr(16, 1));
      return sex % 2 ? '男' : '女';
  };
  const digitUppercase = (n) => {
      const fraction = ['角', '分'];
      const digit = [
          '零', '壹', '贰', '叁', '肆',
          '伍', '陆', '柒', '捌', '玖'
      ];
      const unit = [
          ['元', '万', '亿'],
          ['', '拾', '佰', '仟']
      ];
      n = Math.abs(n);
      let s = '';
      for (let i = 0; i < fraction.length; i++) {
          s += (digit[Math.floor(n * 10 * Math.pow(10, i)) % 10] + fraction[i]).replace(/零./, '');
      }
      s = s || '整';
      n = Math.floor(n);
      for (let i = 0; i < unit[0].length && n > 0; i++) {
          let p = '';
          for (let j = 0; j < unit[1].length && n > 0; j++) {
              p = digit[n % 10] + unit[1][j] + p;
              n = Math.floor(n / 10);
          }
          s = p.replace(/(零.)*零$/, '').replace(/^$/, '零') + unit[0][i] + s;
      }
      return s.replace(/(零.)*零元/, '元')
          .replace(/(零.)+/g, '零')
          .replace(/^整$/, '零元整');
  };
  const injectScript = (src) => {
      const s = document.createElement('script');
      s.type = 'text/javascript';
      s.async = true;
      s.src = src;
      const t = document.getElementsByTagName('script')[0];
      t.parentNode.insertBefore(s, t);
  };
  const sinogToLetter = (str) => {
      function checkCh(ch) {
          const uni = ch.charCodeAt(0);
          if (uni > 40869 || uni < 19968)
              return ch;
          return (oMultiDiff[uni] ? oMultiDiff[uni] : (strChineseFirstPY.charAt(uni - 19968)));
      }
      function mkRslt(arr) {
          let arrRslt = [''];
          for (let i = 0, len = arr.length; i < len; i++) {
              const str = arr[i];
              const strlen = str.length;
              if (strlen == 1) {
                  for (let k = 0; k < arrRslt.length; k++) {
                      arrRslt[k] += str;
                  }
              }
              else {
                  const tmpArr = arrRslt.slice(0);
                  arrRslt = [];
                  for (let k = 0; k < strlen; k++) {
                      const tmp = tmpArr.slice(0);
                      for (let j = 0; j < tmp.length; j++) {
                          tmp[j] += str.charAt(k);
                      }
                      arrRslt = arrRslt.concat(tmp);
                  }
              }
          }
          return arrRslt.join();
      }
      if (typeof (str) != 'string')
          throw new Error('函数makePy需要字符串类型参数!');
      const arrResult = [];
      for (let i = 0, len = str.length; i < len; i++) {
          const ch = str.charAt(i);
          arrResult.push(checkCh(ch));
      }
      return mkRslt(arrResult);
  };
  const getFitSize = (px, draft = 750) => {
      const scale = document.body.clientWidth / draft;
      return Math.floor((scale * px));
  };

  class IndexedDB {
      constructor(props) {
          const { dbName, storeName, version } = props;
          this.storeName = storeName;
          const indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB;
          const request = indexedDB.open(dbName, version);
          request.onsuccess = e => {
              this.db = e.target.result;
              console.log('Init indexedDB successfully');
          };
          request.onupgradeneeded = e => {
              this.db = e.target.result;
              if (!this.db.objectStoreNames.contains(storeName)) {
                  this.store = this.db.createObjectStore(storeName);
              }
              console.log('DB version changed, db version: ', this.db.version);
          };
          request.onerror = e => { console.info('Can not open indexedDB', e); };
      }
      get(key, callback) {
          const transaction = this.db.transaction(this.storeName);
          const objectStore = transaction.objectStore(this.storeName);
          const request = objectStore.get(key);
          request.onerror = e => { console.info('Can not get value', e); };
          request.onsuccess = e => { callback(e.target.result); };
      }
      set(key, value) {
          let oldValue;
          this.get(key, function (res) { oldValue = res; });
          if (oldValue) {
              console.info('You should use function update');
          }
          else {
              const transaction = this.db.transaction(this.storeName, 'readwrite');
              const objectStore = transaction.objectStore(this.storeName);
              const request = objectStore.add(value, key);
              request.onerror = e => { console.info('Can not add value', e); };
          }
      }
      update(key, newValue) {
          const transaction = this.db.transaction(this.storeName, 'readwrite');
          const objectStore = transaction.objectStore(this.storeName);
          const request = objectStore.put(newValue, key);
          request.onerror = e => { console.info('Can not update value', e); };
      }
      remove(key) {
          const request = this.db.transaction(this.storeName, 'readwrite')
              .objectStore(this.storeName)
              .delete(key);
          request.onerror = e => { console.info('Can not remove value', e); };
      }
      close() {
          this.db.close();
      }
  }

  const toFullScreen = () => {
      const el = document.documentElement;
      const rfs = el.requestFullScreen || el.webkitRequestFullScreen || el.mozRequestFullScreen || el.msRequestFullScreen;
      if (rfs) {
          rfs.call(el);
      }
      else if (typeof window.ActiveXObject !== 'undefined') {
          const wscript = new window.ActiveXObject('WScript.Shell');
          if (wscript !== null) {
              wscript.SendKeys('{F11}');
          }
      }
      else {
          alert('浏览器不支持全屏');
      }
  };
  const exitFullscreen = () => {
      const el = parent.document;
      const cfs = el.cancelFullScreen || el.webkitCancelFullScreen || el.mozCancelFullScreen || el.exitFullScreen;
      if (cfs) {
          cfs.call(el);
      }
      else if (typeof window.ActiveXObject !== 'undefined') {
          const wscript = new window.ActiveXObject('WScript.Shell');
          if (wscript !== null) {
              wscript.SendKeys('{F11}');
          }
      }
      else {
          alert('切换失败,可尝试Esc退出');
      }
  };
  const LocalStorage = {
      get(user, name) {
          const mapStorage = JSON.parse(localStorage.getItem(user)) || {};
          return mapStorage[name] || '';
      },
      set(user, name, value) {
          if (!name)
              return;
          const mapStorage = JSON.parse(localStorage.getItem(user)) || {};
          mapStorage[name] = value;
          localStorage.setItem(user, JSON.stringify(mapStorage));
      },
      remove(user, name) {
          const mapStorage = JSON.parse(localStorage.getItem(user)) || {};
          mapStorage[name] && delete mapStorage[name];
          localStorage.setItem(user, JSON.stringify(mapStorage));
      },
      clear() {
          localStorage.clear();
      },
  };
  const getPosition = (timeout = 10000, maximumAge = 60000) => new Promise((resolve, reject) => {
      if (!navigator && !navigator.geolocation) {
          return reject(new Error('geolocation api not supported'));
      }
      const success = (loc) => {
          const location = {
              latitude: loc.coords.latitude,
              longitude: loc.coords.longitude,
              accuracy: loc.coords.accuracy
          };
          resolve(location);
      };
      const error = () => reject('出错了');
      navigator.geolocation.getCurrentPosition(success, error, {
          timeout,
          maximumAge
      });
  });
  const winCopy = (flag) => {
      ['contextmenu', 'selectstart', 'copy'].forEach(function (ev) {
          document.addEventListener(ev, function (event) {
              return event.returnValue = flag;
          });
      });
  };
  const print = (printEleId, rootEleId, style) => {
      const containerDiv = document.createElement('div');
      containerDiv.setAttribute('id', 'containerDiv');
      containerDiv.style.cssText = style ? style : 'width: 100vw;height:100vh';
      const box = document.getElementById(printEleId);
      const root = document.getElementById(rootEleId);
      const _p = box.style.position;
      const _o = box.style.overflowY;
      box.style.position = 'static';
      box.style.overflowY = 'visible';
      root.style.visibility = 'hidden';
      containerDiv.innerHTML = box.outerHTML;
      root.parentNode.insertBefore(containerDiv, root);
      window.print();
      root.style.visibility = 'visible';
      box.style.position = _p;
      box.style.overflowY = _o;
      if (document.body.contains(document.getElementById('containerDiv'))) {
          document.body.removeChild(document.getElementById('containerDiv'));
      }
      return false;
  };
  const setVibration = () => {
      window.navigator.vibrate([100, 30, 100, 30, 100, 200, 200, 30, 200, 30, 200, 200, 100, 30, 100, 30, 100]);
  };
  const copy = (str) => {
      const el = document.createElement('textarea');
      el.value = str;
      el.setAttribute('readonly', '');
      el.style.position = 'absolute';
      el.style.left = '-9999px';
      el.style.top = '-9999px';
      document.body.appendChild(el);
      const selected = document.getSelection().rangeCount > 0
          ? document.getSelection().getRangeAt(0)
          : false;
      el.select();
      document.execCommand('copy');
      document.body.removeChild(el);
      if (selected) {
          document.getSelection().removeAllRanges();
          document.getSelection().addRange(selected);
      }
  };
  const scrollToTop = () => {
      const c = document.documentElement.scrollTop || document.body.scrollTop;
      if (c > 0) {
          window.requestAnimationFrame(scrollToTop);
          window.scrollTo(0, c - c / 8);
      }
  };
  const userBrowser = () => {
      const browserName = navigator.userAgent.toLowerCase();
      if (/msie/i.test(browserName) && !/opera/.test(browserName)) {
          return 'IE';
      }
      else if (/firefox/i.test(browserName)) {
          return 'Firefox';
      }
      else if (/chrome/i.test(browserName) && /webkit/i.test(browserName) && /mozilla/i.test(browserName)) {
          return 'Chrome';
      }
      else if (/opera/i.test(browserName)) {
          return 'Opera';
      }
      else if (/webkit/i.test(browserName) && !(/chrome/i.test(browserName) && /webkit/i.test(browserName) && /mozilla/i.test(browserName))) {
          return 'Safari';
      }
      else {
          return '';
      }
  };
  const getLocalStorageSize = () => {
      if (!window.localStorage) {
          console.log('浏览器不支持localStorage');
      }
      let size = 0;
      for (const item in window.localStorage) {
          if (window.localStorage.hasOwnProperty(item)) {
              size += window.localStorage.getItem(item).length;
          }
      }
      return (size / 1024).toFixed(2) + 'KB';
  };

  const performanceAnalysis = () => {
      const per = window.performance;
      setTimeout(function () {
          const t = per.timing;
          console.log('DNS查询耗时 ：' + (t.domainLookupEnd - t.domainLookupStart).toFixed(0));
          console.log('TCP链接耗时 ：' + (t.connectEnd - t.connectStart).toFixed(0));
          console.log('request请求耗时 ：' + (t.responseEnd - t.responseStart).toFixed(0));
          console.log('解析dom树耗时 ：' + (t.domComplete - t.domInteractive).toFixed(0));
          console.log('白屏时间 ：' + (t.responseStart - t.navigationStart).toFixed(0));
          console.log('domready时间 ：' + (t.domContentLoadedEventEnd - t.navigationStart).toFixed(0));
          console.log('onload时间 ：' + (t.loadEventEnd - t.navigationStart).toFixed(0));
          if (t == per.memory) {
              console.log('js内存使用占比 ：' + (t.usedJSHeapSize / t.totalJSHeapSize * 100).toFixed(2) + '%');
          }
      });
  };
  const getPerformanceTiming = () => {
      const performance = window.performance;
      if (!performance) {
          console.log('你的浏览器不支持 performance 接口');
          return;
      }
      const t = performance.timing;
      const times = {};
      times.loadPage = t.loadEventEnd - t.navigationStart;
      times.domReady = t.domComplete - t.responseEnd;
      times.redirect = t.redirectEnd - t.redirectStart;
      times.lookupDomain = t.domainLookupEnd - t.domainLookupStart;
      times.ttfb = t.responseStart - t.navigationStart;
      times.request = t.responseEnd - t.requestStart;
      times.loadEvent = t.loadEventEnd - t.loadEventStart;
      times.appcache = t.domainLookupStart - t.fetchStart;
      times.unloadEvent = t.unloadEventEnd - t.unloadEventStart;
      times.connect = t.connectEnd - t.connectStart;
      return times;
  };

  const getDistance = (startLon, startLat, endLon, endLat) => {
      const PI = Math.PI;
      const lon1 = (PI / 180) * startLon;
      const lon2 = (PI / 180) * endLon;
      const lat1 = (PI / 180) * startLat;
      const lat2 = (PI / 180) * endLat;
      const R = 6378.137;
      const d = Math.acos(Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1)) * R;
      const s = d * 1000;
      return parseInt(`${s}`, 10);
  };
  const calcDistance = (lat1, lng1, lat2, lng2) => {
      const radLat1 = lat1 * Math.PI / 180.0;
      const radLat2 = lat2 * Math.PI / 180.0;
      const a = radLat1 - radLat2;
      const b = lng1 * Math.PI / 180.0 - lng2 * Math.PI / 180.0;
      let s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)));
      s = s * 6378.137;
      s = Math.round(s * 10000) / 10000;
      return s;
  };
  const lonLatToMercator = (lonLat) => {
      const mercator = { x: 0, y: 0 };
      mercator.x = lonLat.lon * 20037508.34 / 180;
      mercator.y = Math.log(Math.tan((90 + lonLat.lat) * Math.PI / 360)) / (Math.PI / 180);
      mercator.y = mercator.y * 20037508.34 / 180;
      return mercator;
  };
  const mercatorToLonlat = (mercator) => {
      const lonlat = { lon: 0, lat: 0 };
      lonlat.lon = mercator.x / 20037508.34 * 180;
      lonlat.lat = mercator.y / 20037508.34 * 180;
      lonlat.lat = 180 / Math.PI * (2 * Math.atan(Math.exp(lonlat.lat * Math.PI / 180)) - Math.PI / 2);
      return lonlat;
  };

  const reg = {
      mobile: /^(((13[0-9]{1})|(14[5,7,9]{1})|(15[0-3,5-9]{1})|(166)|(17[0-3,5-8]{1})|(18[0-9]{1})|(19[8,9]{1}))+\d{8})$|(^[\w!#$%&'*+/=?^_`{|}~-]+(?:\.[\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?$)/,
      website: /^(?=^.{3,255}$)(http(s)?:\/\/)?(www\.)?[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+(:\d+)*(\/\w+\.\w+)*$/,
      nickname: /^[\u4E00-\u9FA5a-zA-Z0-9]{2,12}$/,
      verify_code: /^\d{6}$/,
      verify_pwd: /^([a-zA-Z0-9_*@#]{6,16})$/,
      email: /^[\w!#$%&'*+/=?^_`{|}~-]+(?:\.[\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?$/,
      character: /^.{0,254}$/,
      intNumber: /^[1-9]\d*$/,
      negativeInteger: /^-[1-9]\d*$/,
      isNotNegativeFloatNum: /^\d+(\.\d+)?$/,
      cP: /^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$/,
      cPattern: /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-Z0-9]{4}[A-Z0-9挂学警港澳]{1}$/,
      number: /^[0-9]+.{0,1}[0-9]{0,30}$/,
      numeric_letters: /^[0-9a-zA-Z]{0,40}$/g,
      chinese_numeric_letters: /^[a-zA-Z0-9\u4e00-\u9fa5]+$/,
      strong_password: /^.*(?=.{6,})(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*? ]).*$/,
      cname: /^[\u4e00-\u9fa5]+(·[\u4e00-\u9fa5]+)*$/,
      ename: /^[A-Z][a-z]*(\s[A-Z][a-z]*)*$/,
      ip: /^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/,
      ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,
      color16Reg: /^#([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$/i,
      mac: /^[A-Fa-f\d]{2}:[A-Fa-f\d]{2}:[A-Fa-f\d]{2}:[A-Fa-f\d]{2}:[A-Fa-f\d]{2}:[A-Fa-f\d]{2}$/
  };
  function validate(key, value) {
      return new RegExp(reg[`${key}`]).test(value);
  }

  const getOffset = function (ele) {
      let left = ele.offsetLeft;
      let top = ele.offsetTop;
      let parent = ele.offsetParent;
      while (parent && parent.nodeName.toLowerCase() !== 'body') {
          left += parent.offsetLeft + parent.clientLeft;
          top += parent.offsetTop + parent.clientTop;
          parent = parent.offsetParent;
      }
      return {
          left,
          top
      };
  };
  const shaking = ({ ele, attr, cb, rate = 20, time = 50 }) => {
      function getStyle(ele, attr) {
          if (ele.currentStyle) {
              return ele.currentStyle[attr];
          }
          else {
              return window.getComputedStyle(ele)[attr];
          }
      }
      const pos = parseInt(getStyle(ele, attr));
      const arr = [];
      let timer = null;
      let num = 0;
      for (let i = rate; i > 0; i -= 2) {
          arr.push(i, -i);
      }
      arr.push(0);
      clearInterval(timer);
      timer = setInterval(function () {
          ele.style[attr] = pos + arr[num] + 'px';
          num++;
          if (num === arr.length) {
              clearInterval(timer);
              cb && cb();
          }
      }, time);
  };
  const stopPropagation = (e) => {
      e = e || window.event;
      if (e.stopPropagation) {
          e.stopPropagation();
      }
      else {
          e.cancelBubble = true;
      }
  };
  const hasClass = (ele, name) => {
      return ele.className.match(new RegExp('(\\s|^)' + name + '(\\s|$)'));
  };
  const addClass = (ele, name) => {
      if (!hasClass(ele, name))
          ele.className += ' ' + name;
  };
  const removeClass = (ele, name) => {
      if (hasClass(ele, name)) {
          const reg = new RegExp('(\\s|^)' + name + '(\\s|$)');
          ele.className = ele.className.replace(reg, '');
      }
  };
  const replaceClass = (ele, newName, oldName) => {
      removeClass(ele, oldName);
      addClass(ele, newName);
  };
  const numberRoll = (ele, targetNumber, duration) => {
      const type = ele.tagName;
      let firstValue;
      const frequency = duration / 1000;
      if (type === 'INPUT') {
          if (isNaN(Number(targetNumber))) {
              throw new Error('目标数字传递错误');
          }
          if (!isNaN(Number(ele.value))) {
              firstValue = !!ele.value ? Number(ele.value) : 0;
          }
      }
      else {
          if (isNaN(Number(targetNumber))) {
              throw new Error('目标数字传递错误');
          }
          if (!isNaN(Number(ele.innerHTML))) {
              firstValue = Number(ele.innerHTML);
          }
      }
      const step = (Number(targetNumber) - firstValue) / 1000;
      if (type === 'INPUT') {
          const numberTimer = setInterval(function () {
              firstValue += step;
              ele.value = firstValue;
              if (Math.abs(Number(targetNumber) - firstValue) <= step) {
                  ele.value = targetNumber;
                  clearInterval(numberTimer);
              }
          }, frequency);
      }
      else {
          const numberTimer = setInterval(function () {
              firstValue += step;
              ele.innerHTML = firstValue;
              if (Math.abs(Number(targetNumber) - firstValue) <= step) {
                  ele.innerHTML = targetNumber;
                  clearInterval(numberTimer);
              }
          }, frequency);
      }
  };
  const scrollToTheBottom = (ele, callback, delay = 200) => {
      const scrollFn = () => {
          const sh = ele.scrollHeight;
          const ch = ele.clientHeight;
          const st = ele.scrollTop;
          if ((ch + st) >= sh) {
              callback();
          }
      };
      ele.addEventListener('scroll', throttle(scrollFn, delay));
  };

  const bubbleSort = (arr) => {
      function exchange(v1, v2) {
          const temp = arr[v1];
          arr[v1] = arr[v2];
          arr[v2] = temp;
      }
      const length = arr.length;
      for (let i = length - 1; i >= 0; i--) {
          for (let j = 0; j < i; j++) {
              if (arr[j] > arr[j + 1]) {
                  exchange(j, j + 1);
              }
          }
      }
      return arr;
  };

  const arrayUnique = (arr) => {
      return Array.from(new Set(arr));
  };
  const arrayNonRepeatfy = (arr) => {
      const map = new Map();
      const array = [];
      for (let i = 0; i < arr.length; i++) {
          if (map.has(arr[i])) {
              map.set(arr[i], true);
          }
          else {
              map.set(arr[i], false);
              array.push(arr[i]);
          }
      }
      return array;
  };
  const aLineUnique = (arr) => {
      return [...new Set(arr)];
  };

  const isBase64 = (base64) => {
      return /data:image\/.+;base64,/.test(base64);
  };
  const isArray = (arr) => {
      return Array.isArray(arr);
  };
  const isString = (str) => {
      return typeof str === 'string';
  };
  const isFunction = (fn) => {
      if (fn && typeof fn === 'function') {
          return true;
      }
      return false;
  };
  const isObject = (obj) => {
      return Object.prototype.toString.call(obj) === '[object Object]';
  };
  const isNumber = (num) => {
      if (isNaN(num))
          return false;
      return typeof num === 'number';
  };
  const isWeiXin = () => {
      const ua = navigator.userAgent.toLowerCase();
      if (ua.indexOf('micromessenger') != -1) {
          return true;
      }
      else {
          return false;
      }
  };
  const isNull = (o) => {
      return Object.prototype.toString.call(o).slice(8, -1) === 'Null';
  };
  const isUndefined = (o) => {
      return Object.prototype.toString.call(o).slice(8, -1) === 'Undefined';
  };
  const isDate = (o) => {
      return Object.prototype.toString.call(o).slice(8, -1) === 'Date';
  };
  const isRegExp = (o) => {
      return Object.prototype.toString.call(o).slice(8, -1) === 'RegExp';
  };
  const isError = (o) => {
      return Object.prototype.toString.call(o).slice(8, -1) === 'Error';
  };
  const isSymbol = (o) => {
      return Object.prototype.toString.call(o).slice(8, -1) === 'Symbol';
  };
  const isPromise = (o) => {
      return Object.prototype.toString.call(o).slice(8, -1) === 'Promise';
  };
  const returnType = (o) => {
      if (Number.isNaN(o))
          return 'NaN';
      return Object.prototype.toString.call(o).slice(8, -1);
  };
  const isSupportWebP = () => {
      return !![].map && document.createElement('canvas').toDataURL('image/webp').indexOf('data:image/webp') == 0;
  };
  const isMobile = () => {
      if (window.navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i)) {
          return true;
      }
      else {
          return false;
      }
  };
  const isAndroidMobileDevice = () => {
      return /android/i.test(navigator.userAgent.toLowerCase());
  };
  const isAppleMobileDevice = () => {
      return /iphone|ipod|ipad|Macintosh/i.test(navigator.userAgent.toLowerCase());
  };

  const _isBasicType = (opts) => {
      const type = returnType(opts);
      if (type === 'String' || type === 'Symbol' || type === 'Number' || type === 'Null' || type === 'Undefined' || type === 'Boolean' || type === 'NaN') {
          return true;
      }
      return false;
  };
  const _initCloneObject = obj => {
      if (obj.constructor === undefined) {
          return Object.create(null);
      }
      if (typeof obj.constructor === 'function' && (obj !== obj.constructor || obj !== Object.prototype)) {
          const proto = Object.getPrototypeOf(obj);
          return Object.create(proto);
      }
      return {};
  };
  const _returnEntity = (opts) => {
      const type = returnType(opts);
      switch (type) {
          case 'Object':
              return _initCloneObject(opts);
          case 'Array':
              return [];
          case 'Map':
              return new Map();
          case 'Set':
              return new Set();
          default:
              return null;
      }
  };
  const _cloneObj = (obj, map, newObj) => {
      for (const key in obj) {
          if (obj.hasOwnProperty(key)) {
              if (_isBasicType(obj[key])) {
                  newObj[key] = obj[key];
              }
              else {
                  newObj[key] = _deepClone(obj[key], map);
              }
          }
      }
      return newObj;
  };
  const _cloneArr = (arr, map, newArr) => {
      arr.forEach(item => {
          if (_isBasicType(item)) {
              newArr.push(item);
          }
          else {
              newArr.push(_deepClone(item, map));
          }
      });
      return newArr;
  };
  const _cloneMap = (map, WeakMap, newMap) => {
      for (const [key, value] of map) {
          if (_isBasicType(value)) {
              newMap.set(key, value);
          }
          else {
              newMap.set(key, _deepClone(value, WeakMap));
          }
      }
      return newMap;
  };
  const _cloneSet = (set, WeakMap, newSet) => {
      for (const value of set) {
          if (_isBasicType(value)) {
              newSet.add(value);
          }
          else {
              newSet.add(_deepClone(value, WeakMap));
          }
      }
      return newSet;
  };
  const _deepClone = (data, map = new WeakMap()) => {
      if (_isBasicType(data)) {
          return data;
      }
      let newData = null;
      const type = returnType(data);
      if (map.has(data)) {
          if (CACHEMAP.get(data)) {
              const FREQUENCY = CACHEMAP.get(data);
              if (FREQUENCY >= DEPTH) {
                  return map.get(data);
              }
              CACHEMAP.set(data, FREQUENCY + 1);
          }
      }
      const result = _returnEntity(data);
      if (result !== null) {
          map.set(data, result);
      }
      else {
          map.set(data, data);
      }
      if (!CACHEMAP.get(data)) {
          CACHEMAP.set(data, 1);
      }
      switch (type) {
          case 'Object':
              newData = _cloneObj(data, map, result);
              break;
          case 'Array':
              newData = _cloneArr(data, map, result);
              break;
          case 'RegExp':
              newData = new RegExp(data);
              break;
          case 'Date':
              newData = new Date(data);
              break;
          case 'Map':
              newData = _cloneMap(data, map, result);
              break;
          case 'Set':
              newData = _cloneSet(data, map, result);
              break;
          default:
              newData = data;
              break;
      }
      return newData;
  };
  const DEPTH = 1;
  const CACHEMAP = new Map();
  const cloneDeep = (data) => {
      const NEWDAtA = _deepClone(data);
      CACHEMAP.clear();
      return NEWDAtA;
  };

  const stringfyQueryString = (obj) => {
      if (!obj)
          return '';
      const pairs = [];
      for (const key in obj) {
          const value = obj[key];
          if (value instanceof Array) {
              for (let i = 0; i < value.length; ++i) {
                  pairs.push(encodeURIComponent(key + '[' + i + ']') + '=' + encodeURIComponent(value[i]));
              }
              continue;
          }
          pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]));
      }
      return pairs.join('&');
  };
  const deserialization = (str) => {
      const pairs = str.split('&');
      const obj = {};
      for (let i = 0; i < pairs.length; i++) {
          const item = pairs[i];
          const kv = item.split('=');
          obj[kv[0]] = kv[1];
      }
      return obj;
  };
  const values = (obj) => {
      const arr = [];
      if (isObject(obj)) {
          for (const key in obj) {
              arr.push(obj[key]);
          }
      }
      return arr;
  };
  const keys = (obj) => {
      const arr = [];
      if (isObject(obj)) {
          for (const key in obj) {
              arr.push(key);
          }
      }
      return arr;
  };

  const downBlob = (data, fileName) => {
      const url = window.URL.createObjectURL(new Blob([data]));
      const a = document.createElement('a');
      a.style.display = 'none';
      a.href = url;
      a.setAttribute('download', fileName);
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
  };

  const vConsole = () => {
      const btn = document.createElement('div');
      btn.style.cssText = ' background: #07c160;position: fixed; left: 0;top: 85%;font-size: 1.07692308em;border-radius: 0.30769231em;box-shadow: 0 0 0.61538462em rgb(0 0 0 / 40%);padding: 0.61538462em 1.23076923em;color: #fff';
      btn.innerHTML = 'vConsole';
      document.body.appendChild(btn);
      const cvmask = document.createElement('div');
      cvmask.id = 'vc_mask';
      cvmask.style.cssText = 'position: fixed;top: 0;left: 0;right: 0;bottom: 0;background: rgba(0, 0, 0, 0.6);z-index:1';
      const panel = document.createElement('div');
      panel.id = 'vc_panel';
      panel.style.cssText = ' font-size: 14px; max-height: 85vh; position: fixed;min-height: 85vh;left: 0;right: 0; bottom: 0;z-index: 10002; background-color: #191919;-webkit-transition: -webkit-transform 0.3s;transition: -webkit-transform 0.3s; transition: transform 0.3s; transition: transform 0.3s, -webkit-transform 0.3s;';
      const panel_top = document.createElement('div');
      panel_top.style.cssText = 'border-bottom: 1px solid rgba(255,255,255,0.05);overflow-x: auto;height: 3em;width: auto;white-space: nowrap;color: #fff; line-height: 3em; padding: 0 1.15384615em;';
      panel_top.innerHTML = 'log';
      panel.appendChild(panel_top);
      const h = viewportToPixels('85vh');
      const ulH = h - (14 * 6);
      const panel_ul = document.createElement('ul');
      panel_ul.style.cssText = `padding-bottom: 2em; width: 100%; height: ${ulH}px; overflow-y: auto; padding-bo`;
      panel.appendChild(panel_ul);
      const panel_b = document.createElement('div');
      panel_b.style.cssText = 'justify-content: space-between;align-items: center; background-color: #191919; height: 3em; border-top: 1px solid rgba(255,255,255,0.05);line-height: 3em;position: absolute;left: 0;right: 0;bottom: 0; display: flex; -webkit-box-orient: horizontal;-webkit-box-direction: normal; -webkit-flex-direction: row;-moz-box-orient: horizontal;-moz-box-direction: normal; -ms-flex-direction: row;flex-direction: row;';
      const clear = document.createElement('div');
      clear.style.cssText = 'color: #fff; text-decoration: none;width: 50%;-webkit-box-flex: 1;-webkit-flex: 1;-moz-box-flex: 1;-ms-flex: 1;flex: 1;text-align: center;position: relative;';
      clear.innerText = 'Clear';
      const hide = document.createElement('div');
      hide.style.cssText = 'color: #fff; text-decoration: none;width: 50%;-webkit-box-flex: 1;-webkit-flex: 1;-moz-box-flex: 1;-ms-flex: 1;flex: 1;text-align: center;position: relative;';
      hide.innerText = 'Hide';
      const panel_b_c = document.createElement('div');
      panel_b_c.style.cssText = 'width: 1px; background: rgb(97 94 94);height: 2em;';
      panel_b.appendChild(clear);
      panel_b.appendChild(panel_b_c);
      panel_b.appendChild(hide);
      panel.appendChild(panel_b);
      const onHide = () => {
          const vc_panel = document.getElementById('vc_panel');
          const vc_mask = document.getElementById('vc_mask');
          document.body.removeChild(vc_panel);
          document.body.removeChild(vc_mask);
      };
      const drawerMove = (e) => {
          let l = e.touches[0].clientX - (btn.scrollWidth / 2);
          let t = e.touches[0].clientY - (btn.scrollHeight / 2);
          const minL = 0;
          const minT = 0;
          const maxL = window.innerWidth - btn.scrollWidth;
          const maxT = window.innerHeight - btn.scrollHeight;
          l < minL && (l = 0);
          t < minT && (t = 0);
          l > maxL && (l = maxL);
          t > maxT && (t = maxT);
          btn.style.left = l + 'px';
          btn.style.top = t + 'px';
      };
      const winMouseup = () => {
          window.removeEventListener('touchmove', drawerMove);
          window.removeEventListener('touchend', winMouseup);
      };
      btn.onclick = () => {
          document.body.appendChild(panel);
          document.body.appendChild(cvmask);
      };
      btn.ontouchstart = () => {
          window.removeEventListener('touchmove', drawerMove);
          window.addEventListener('touchmove', drawerMove);
          window.addEventListener('touchend', winMouseup);
      };
      cvmask.onclick = () => {
          onHide();
      };
      hide.onclick = () => {
          onHide();
      };
      clear.onclick = () => {
          panel_ul.innerHTML = '';
      };
      const oldLog = console.log;
      window.console.log = function (...rest) {
          const panel_li = document.createElement('li');
          panel_li.style.cssText = 'margin: 0;padding: 0.46153846em 0.61538462em;overflow: hidden;line-height: 1.3;border-bottom: 1px solid rgba(255,255,255,0.05);word-break: break-word;color: #fff';
          let text = '';
          rest.forEach((it) => {
              oldLog(Object.prototype.toString.call(it));
              text += JSON.stringify(it, null, 4);
          });
          panel_li.innerText = `${text}`;
          panel_ul.appendChild(panel_li);
      };
  };

  class Socket {
      constructor(props) {
          const { url, reconnectCount, heartTime } = props;
          this.ws = null;
          this.url = url;
          this.sendTimer = null;
          this.heartTimer = null;
          this.reconnectCount = reconnectCount || 3000;
          this.heartTime = heartTime || 5000;
      }
      createWebSocket(message, cb) {
          this.ws = new WebSocket(this.url);
          message = JSON.stringify(message);
          this.ws.onopen = () => {
              this.sendTimer = setInterval(() => {
                  this.ws.send(message);
              }, 1000);
              this.heartbeat(message, cb);
              console.log('ws连接成功!' + new Date().toLocaleString());
          };
          this.ws.onclose = (evt) => {
              console.log('关闭ws', evt);
              this.ws.close();
          };
          this.ws.onmessage = (evt) => {
              this.heartbeat(message, cb);
              const data = JSON.parse(evt.data);
              if (cb && typeof cb === 'function') {
                  cb(data);
              }
          };
          this.ws.onerror = (evt) => {
              console.log('error:' + evt);
              this.heartbeat(message, cb);
          };
      }
      heartbeat(message, cb) {
          clearInterval(this.heartTimer);
          this.heartTimer = setInterval(() => {
              if (this.reconnectCount === 0) {
                  clearInterval(this.heartTimer);
                  return;
              }
              this.ws.close();
              clearInterval(this.sendTimer);
              this.createWebSocket(message, cb);
              --this.reconnectCount;
          }, this.heartTime);
      }
  }

  class Ajax {
      constructor(options) {
          this.options = null;
          this.options = { data: null, method: 'GET', responseType: 'json', ...options };
      }
      send(callback, error) {
          const { data, method, url, responseType } = this.options;
          const xhr = new XMLHttpRequest();
          xhr.responseType = responseType;
          xhr.open(method, url);
          xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
          data !== null && xhr.setRequestHeader('Content-type', 'application/json;charset=utf-8');
          xhr.addEventListener('load', function () {
              const { status, response } = this;
              if (status === 200 && callback && typeof callback === 'function') {
                  callback(response);
              }
          });
          xhr.addEventListener('progress', function (event) {
              console.log('event', event);
          });
          xhr.addEventListener('error', function (err) {
              error(err);
          });
          xhr.send(JSON.stringify(data));
      }
      set url(url) {
          this.options.url = url;
      }
      get url() {
          return this.options.url;
      }
  }

  const socket = ({ url }) => {
      return new Socket({ url });
  };

  const orient = () => {
      console.log('orient');
      window.addEventListener('resize', function () {
          const orientation = (window.innerWidth > window.innerHeight) ? 'landscape' : 'portrait';
          if (orientation === 'portrait') {
              console.log('竖屏');
          }
          else {
              console.log('横屏');
          }
      }, false);
  };

  const dateFormater = (formater, time) => {
      const date = time ? new Date(time) : new Date(), Y = date.getFullYear() + '', M = date.getMonth() + 1, D = date.getDate(), H = date.getHours(), m = date.getMinutes(), s = date.getSeconds();
      return formater.replace(/YYYY|yyyy/g, Y)
          .replace(/YY|yy/g, Y.substr(2, 2))
          .replace(/MM/g, (M < 10 ? '0' : '') + M)
          .replace(/DD/g, (D < 10 ? '0' : '') + D)
          .replace(/HH|hh/g, (H < 10 ? '0' : '') + H)
          .replace(/mm/g, (m < 10 ? '0' : '') + m)
          .replace(/ss/g, (s < 10 ? '0' : '') + s);
  };
  const formatPassTime = (startTime) => {
      const currentTime = Date.parse(String(new Date())), time = currentTime - startTime, day = parseInt(String(time / (1000 * 60 * 60 * 24))), hour = parseInt(String(time / (1000 * 60 * 60))), min = parseInt(String(time / (1000 * 60))), month = parseInt(String(day / 30)), year = parseInt(String(month / 12));
      if (year)
          return year + '年前';
      if (month)
          return month + '个月前';
      if (day)
          return day + '天前';
      if (hour)
          return hour + '小时前';
      if (min)
          return min + '分钟前';
      else
          return '刚刚';
  };
  const formatRemainTime = (endTime) => {
      const startDate = new Date();
      const endDate = new Date(endTime);
      const t = endDate.getTime() - startDate.getTime();
      let d = 0, h = 0, m = 0, s = 0;
      if (t >= 0) {
          d = Math.floor(t / 1000 / 3600 / 24);
          h = Math.floor(t / 1000 / 60 / 60 % 24);
          m = Math.floor(t / 1000 / 60 % 60);
          s = Math.floor(t / 1000 % 60);
      }
      return d + '天' + h + '小时' + m + '分钟 ' + s + '秒';
  };

  const shuffle = (arr) => {
      const result = [];
      let random;
      while (arr.length > 0) {
          random = Math.floor(Math.random() * arr.length);
          result.push(arr[random]);
          arr.splice(random, 1);
      }
      return result;
  };

  const accAdd = function (num1, num2) {
      num1 = Number(num1);
      num2 = Number(num2);
      let dec1 = 0;
      let dec2 = 0;
      try {
          dec1 = countDecimals(num1) + 1;
      }
      catch (e) {
          dec1 = 0;
      }
      try {
          dec2 = countDecimals(num2) + 1;
      }
      catch (e) {
          dec2 = 0;
      }
      const times = Math.pow(10, Math.max(dec1, dec2));
      const result = (accMul(num1, times) + accMul(num2, times)) / times;
      return getCorrectResult('add', num1, num2, result);
  };
  const accSub = function (num1, num2) {
      num1 = Number(num1);
      num2 = Number(num2);
      let dec1 = 0;
      let dec2 = 0;
      try {
          dec1 = countDecimals(num1) + 1;
      }
      catch (e) {
          dec1 = 0;
      }
      try {
          dec2 = countDecimals(num2) + 1;
      }
      catch (e) {
          dec2 = 0;
      }
      const times = Math.pow(10, Math.max(dec1, dec2));
      const result = Number((accMul(num1, times) - accMul(num2, times)) / times);
      return getCorrectResult('sub', num1, num2, result);
  };
  const accMul = function (num1, num2) {
      num1 = Number(num1);
      num2 = Number(num2);
      let times = 0;
      const s1 = num1.toString();
      const s2 = num2.toString();
      try {
          times += countDecimals(s1);
      }
      catch (e) {
      }
      try {
          times += countDecimals(s2);
      }
      catch (e) {
      }
      const result = convertToInt(s1) * convertToInt(s2) / Math.pow(10, times);
      return getCorrectResult('mul', num1, num2, result);
  };
  const accDiv = function (num1, num2) {
      num1 = Number(num1);
      num2 = Number(num2);
      let t1 = 0;
      let t2 = 0;
      let dec1 = 0;
      let dec2 = 0;
      try {
          t1 = countDecimals(num1);
      }
      catch (e) {
      }
      try {
          t2 = countDecimals(num2);
      }
      catch (e) {
      }
      dec1 = convertToInt(num1);
      dec2 = convertToInt(num2);
      const result = accMul((dec1 / dec2), Math.pow(10, t2 - t1));
      return getCorrectResult('div', num1, num2, result);
  };
  const countDecimals = function (num) {
      let len = 0;
      try {
          num = Number(num);
          let str = num.toString().toUpperCase();
          if (str.split('E').length === 2) {
              let isDecimal = false;
              if (str.split('.').length === 2) {
                  str = str.split('.')[1];
                  if (Number.parseInt(str.split('E')[0], 10) !== 0) {
                      isDecimal = true;
                  }
              }
              const x = str.split('E');
              if (isDecimal) {
                  len = x[0].length;
              }
              len -= Number.parseInt(x[1], 10);
          }
          else if (str.split('.').length === 2) {
              if (Number.parseInt(str.split('.')[1], 10) !== 0) {
                  len = str.split('.')[1].length;
              }
          }
      }
      catch (e) {
          throw e;
      }
      finally {
          if (isNaN(len) || len < 0) {
              len = 0;
          }
      }
      return len;
  };
  const convertToInt = function (num) {
      num = Number(num);
      let newNum = num;
      const times = countDecimals(num);
      const tempNum = num.toString().toUpperCase();
      if (tempNum.split('E').length === 2) {
          newNum = Math.round(num * Math.pow(10, times));
      }
      else {
          newNum = Number(tempNum.replace('.', ''));
      }
      return newNum;
  };
  const getCorrectResult = function (type, num1, num2, result) {
      let tempResult = 0;
      switch (type) {
          case 'add':
              tempResult = num1 + num2;
              break;
          case 'sub':
              tempResult = num1 - num2;
              break;
          case 'div':
              tempResult = num1 / num2;
              break;
          case 'mul':
              tempResult = num1 * num2;
              break;
      }
      if (Math.abs(result - tempResult) > 1) {
          return tempResult;
      }
      return result;
  };

  const formatPrice = (price, sign = ',') => {
      return String(price).replace(/\B(?=(\d{3})+(?!\d))/g, sign);
  };
  const smallRounding = (num, place) => {
      const p = '10000000000000000000000000000';
      const n = Number(p.slice(0, place));
      return Math.round(num * n) / n;
  };

  const filter = (data, fn) => {
      const func = isArray(data) ? _arrayFilter : () => [];
      return func(data, fn);
  };
  function _arrayFilter(array, predicate) {
      let index = -1;
      const length = array == null ? 0 : array.length;
      let resIndex = 0;
      const result = [];
      while (++index < length) {
          const value = array[index];
          if (predicate(value, index, array)) {
              result[resIndex++] = value;
          }
      }
      return result;
  }

  const _arrayEach = (array, iteratee) => {
      let index = -1;
      const length = array == null ? 0 : array.length;
      while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
              break;
          }
      }
      return array;
  };
  const _objectEach = (obj, iteratee) => {
      if (isObject(obj)) {
          for (const key in obj) {
              if (iteratee(obj[key], key) === false) {
                  break;
              }
          }
      }
  };
  const forEach = (data, fn) => {
      const func = isArray(data) ? _arrayEach : _objectEach;
      return func(data, fn);
  };

  var index = {
      version: version,
      transFormat,
      strInversion,
      initialToCapitali,
      repeat,
      trim,
      getTextWidth,
      guid,
      getFileBase64,
      isAndroidMobileDevice,
      isAppleMobileDevice,
      throttle,
      debounce,
      fileDownload,
      fuzzyQuery,
      getUrlParam,
      cookie,
      colorHex,
      viewportToPixels,
      noRefdelUrlParam,
      getAge,
      getSex,
      digitUppercase,
      hexToRgba,
      rgbaToHex,
      injectScript,
      sinogToLetter,
      getFitSize,
      toFullScreen,
      exitFullscreen,
      LocalStorage,
      getPosition,
      winCopy,
      print,
      setVibration,
      copy,
      scrollToTop,
      userBrowser,
      IndexedDB,
      getLocalStorageSize,
      performanceAnalysis,
      getPerformanceTiming,
      getDistance,
      calcDistance,
      lonLatToMercator,
      mercatorToLonlat,
      validate,
      getOffset,
      shaking,
      stopPropagation,
      hasClass,
      addClass,
      removeClass,
      replaceClass,
      numberRoll,
      scrollToTheBottom,
      arrayUnique,
      arrayNonRepeatfy,
      aLineUnique,
      bubbleSort,
      cloneDeep,
      stringfyQueryString,
      deserialization,
      values,
      keys,
      isBase64,
      isArray,
      isString,
      isFunction,
      isObject,
      isNumber,
      isWeiXin,
      isNull,
      isUndefined,
      isDate,
      isRegExp,
      isError,
      isSymbol,
      isPromise,
      returnType,
      isSupportWebP,
      isMobile,
      downBlob,
      vConsole,
      socket,
      Ajax,
      orient,
      dateFormater,
      formatPassTime,
      formatRemainTime,
      smallRounding,
      shuffle,
      accAdd,
      accSub,
      accMul,
      accDiv,
      formatPrice,
      forEach,
      filter
  };

  return index;

})));
